"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitUntil = waitUntil;
exports.raceTimeout = raceTimeout;
exports.runSerial = runSerial;
exports.SECOND = exports.TimeoutError = void 0;

class TimeoutError extends Error {}

exports.TimeoutError = TimeoutError;
const SECOND = 1000;
exports.SECOND = SECOND;

function timeoutPromise(ms, promise, description) {
  const timeout = new Promise((_, reject) => {
    const id = setTimeout(() => {
      clearTimeout(id);
      const error = new TimeoutError(description);
      reject(error);
    }, ms);
  });
  return Promise.race([promise, timeout]);
}

function waitUntil(asyncTest, description = '', timeout = 10000, interval = 100) {
  const promise = new Promise((resolve, reject) => {
    function wait() {
      asyncTest().then(value => {
        if (value === true) {
          resolve();
        } else {
          setTimeout(wait, interval);
        }
      }).catch(() => {
        reject();
      });
    }

    wait();
  });
  return timeoutPromise(timeout, promise, description);
}

function raceTimeout(ms, promise) {
  return timeoutPromise(ms, promise, 'timeout').catch(err => {
    if (!(err instanceof TimeoutError)) throw err;
  });
}

function runSerial(actions) {
  return actions.reduce((m, a) => m.then(async x => [...x, await a()]), Promise.resolve(new Array()));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3dhaXRpbmcudHMiXSwibmFtZXMiOlsiVGltZW91dEVycm9yIiwiRXJyb3IiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ08sTUFBTUEsWUFBTixTQUEyQkMsS0FBM0IsQ0FBaUM7OztBQUlqQyxNQUFNQyxNQUFNLEdBQUcsSUFBZjs7O0FBRVAsU0FBU0MsY0FBVCxDQUF3QkMsRUFBeEIsRUFBb0NDLE9BQXBDLEVBQTJEQyxXQUEzRCxFQUFnRjtBQUM5RSxRQUFNQyxPQUFPLEdBQUcsSUFBSUMsT0FBSixDQUFZLENBQUNDLENBQUQsRUFBSUMsTUFBSixLQUFlO0FBQ3pDLFVBQU1DLEVBQUUsR0FBR0MsVUFBVSxDQUFDLE1BQU07QUFDMUJDLE1BQUFBLFlBQVksQ0FBQ0YsRUFBRCxDQUFaO0FBQ0EsWUFBTUcsS0FBSyxHQUFHLElBQUlkLFlBQUosQ0FBaUJNLFdBQWpCLENBQWQ7QUFDQUksTUFBQUEsTUFBTSxDQUFDSSxLQUFELENBQU47QUFDRCxLQUpvQixFQUlsQlYsRUFKa0IsQ0FBckI7QUFLRCxHQU5lLENBQWhCO0FBUUEsU0FBT0ksT0FBTyxDQUFDTyxJQUFSLENBQWEsQ0FDbEJWLE9BRGtCLEVBRWxCRSxPQUZrQixDQUFiLENBQVA7QUFJRDs7QUFFTSxTQUFTUyxTQUFULENBQW1CQyxTQUFuQixFQUFrRFgsV0FBVyxHQUFHLEVBQWhFLEVBQW9FQyxPQUFPLEdBQUcsS0FBOUUsRUFBcUZXLFFBQVEsR0FBRyxHQUFoRyxFQUFxRztBQUMxRyxRQUFNYixPQUFPLEdBQUcsSUFBSUcsT0FBSixDQUFZLENBQUNXLE9BQUQsRUFBVVQsTUFBVixLQUFxQjtBQUMvQyxhQUFTVSxJQUFULEdBQWdCO0FBQ2RILE1BQUFBLFNBQVMsR0FBR0ksSUFBWixDQUFrQkMsS0FBRCxJQUFXO0FBQzFCLFlBQUlBLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2xCSCxVQUFBQSxPQUFPO0FBQ1IsU0FGRCxNQUVPO0FBQ0xQLFVBQUFBLFVBQVUsQ0FBQ1EsSUFBRCxFQUFPRixRQUFQLENBQVY7QUFDRDtBQUNGLE9BTkQsRUFNR0ssS0FOSCxDQU1TLE1BQU07QUFDYmIsUUFBQUEsTUFBTTtBQUNQLE9BUkQ7QUFTRDs7QUFDRFUsSUFBQUEsSUFBSTtBQUNMLEdBYmUsQ0FBaEI7QUFjQSxTQUFPakIsY0FBYyxDQUFDSSxPQUFELEVBQVVGLE9BQVYsRUFBbUJDLFdBQW5CLENBQXJCO0FBQ0Q7O0FBRU0sU0FBU2tCLFdBQVQsQ0FBcUJwQixFQUFyQixFQUFpQ0MsT0FBakMsRUFBd0Q7QUFDN0QsU0FBT0YsY0FBYyxDQUFDQyxFQUFELEVBQUtDLE9BQUwsRUFBYyxTQUFkLENBQWQsQ0FBdUNrQixLQUF2QyxDQUE4Q0UsR0FBRCxJQUFTO0FBQzNELFFBQUksRUFBRUEsR0FBRyxZQUFZekIsWUFBakIsQ0FBSixFQUFvQyxNQUFNeUIsR0FBTjtBQUNyQyxHQUZNLENBQVA7QUFHRDs7QUFFTSxTQUFTQyxTQUFULENBQXNCQyxPQUF0QixFQUFtRTtBQUN4RSxTQUFPQSxPQUFPLENBQUNDLE1BQVIsQ0FBZSxDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUQsQ0FBQyxDQUFDUixJQUFGLENBQU8sTUFBT1UsQ0FBUCxJQUFhLENBQUMsR0FBR0EsQ0FBSixFQUFPLE1BQU1ELENBQUMsRUFBZCxDQUFwQixDQUF6QixFQUFpRXRCLE9BQU8sQ0FBQ1csT0FBUixDQUFxQixJQUFJYSxLQUFKLEVBQXJCLENBQWpFLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcblxufVxuXG5leHBvcnQgY29uc3QgU0VDT05EID0gMTAwMDtcblxuZnVuY3Rpb24gdGltZW91dFByb21pc2UobXM6IG51bWJlciwgcHJvbWlzZTogUHJvbWlzZTxhbnk+LCBkZXNjcmlwdGlvbjogc3RyaW5nKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBUaW1lb3V0RXJyb3IoZGVzY3JpcHRpb24pO1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9LCBtcyk7XG4gIH0pO1xuXG4gIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgIHByb21pc2UsXG4gICAgdGltZW91dCxcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWwoYXN5bmNUZXN0OiAoKSA9PiBQcm9taXNlPGFueT4sIGRlc2NyaXB0aW9uID0gJycsIHRpbWVvdXQgPSAxMDAwMCwgaW50ZXJ2YWwgPSAxMDApIHtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmdW5jdGlvbiB3YWl0KCkge1xuICAgICAgYXN5bmNUZXN0KCkudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQod2FpdCwgaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHdhaXQoKTtcbiAgfSk7XG4gIHJldHVybiB0aW1lb3V0UHJvbWlzZSh0aW1lb3V0LCBwcm9taXNlLCBkZXNjcmlwdGlvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYWNlVGltZW91dChtczogbnVtYmVyLCBwcm9taXNlOiBQcm9taXNlPGFueT4pIHtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKG1zLCBwcm9taXNlLCAndGltZW91dCcpLmNhdGNoKChlcnIpID0+IHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuU2VyaWFsPFQ+KGFjdGlvbnM6ICgoKSA9PiBQcm9taXNlPFQ+KVtdKTogUHJvbWlzZTxUW10+IHtcbiAgcmV0dXJuIGFjdGlvbnMucmVkdWNlKChtLCBhKSA9PiBtLnRoZW4oYXN5bmMgKHgpID0+IFsuLi54LCBhd2FpdCBhKCldKSwgUHJvbWlzZS5yZXNvbHZlPFRbXT4obmV3IEFycmF5PFQ+KCkpKTtcbn1cbiJdfQ==