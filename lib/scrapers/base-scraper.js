"use strict";

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseScraper = exports.ScaperProgressTypes = exports.ScraperErrorTypes = void 0;

var _events = require("events");

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

var _waiting = require("../helpers/waiting");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const SCRAPE_PROGRESS = 'SCRAPE_PROGRESS';
let ScraperErrorTypes;
exports.ScraperErrorTypes = ScraperErrorTypes;

(function (ScraperErrorTypes) {
  ScraperErrorTypes["InvalidPassword"] = "INVALID_PASSWORD";
  ScraperErrorTypes["ChangePassword"] = "CHANGE_PASSWORD";
  ScraperErrorTypes["Timeout"] = "TIMEOUT";
  ScraperErrorTypes["AccountBlocked"] = "ACCOUNT_BLOCKED";
  ScraperErrorTypes["Generic"] = "GENERIC";
  ScraperErrorTypes["General"] = "GENERAL_ERROR";
})(ScraperErrorTypes || (exports.ScraperErrorTypes = ScraperErrorTypes = {}));

let ScaperProgressTypes;
exports.ScaperProgressTypes = ScaperProgressTypes;

(function (ScaperProgressTypes) {
  ScaperProgressTypes["Initializing"] = "INITIALIZING";
  ScaperProgressTypes["StartScraping"] = "START_SCRAPING";
  ScaperProgressTypes["LoggingIn"] = "LOGGING_IN";
  ScaperProgressTypes["LoginSuccess"] = "LOGIN_SUCCESS";
  ScaperProgressTypes["LoginFailed"] = "LOGIN_FAILED";
  ScaperProgressTypes["ChangePassword"] = "CHANGE_PASSWORD";
  ScaperProgressTypes["EndScraping"] = "END_SCRAPING";
  ScaperProgressTypes["Terminating"] = "TERMINATING";
})(ScaperProgressTypes || (exports.ScaperProgressTypes = ScaperProgressTypes = {}));

function createErrorResult(errorType, errorMessage) {
  return {
    success: false,
    errorType,
    errorMessage
  };
}

function createTimeoutError(errorMessage) {
  return createErrorResult(ScraperErrorTypes.Timeout, errorMessage);
}

function createGenericError(errorMessage) {
  return createErrorResult(ScraperErrorTypes.Generic, errorMessage);
}

class BaseScraper {
  constructor(options) {
    this.options = options;

    _defineProperty(this, "eventEmitter", new _events.EventEmitter());
  } // eslint-disable-next-line  @typescript-eslint/require-await


  async initialize() {
    this.emitProgress(ScaperProgressTypes.Initializing);

    _momentTimezone.default.tz.setDefault('Asia/Jerusalem');
  }

  async scrape(credentials) {
    this.emitProgress(ScaperProgressTypes.StartScraping);
    await this.initialize();
    let loginResult;

    try {
      loginResult = await this.login(credentials);
    } catch (e) {
      loginResult = e instanceof _waiting.TimeoutError ? createTimeoutError(e.message) : createGenericError(e.message);
    }

    let scrapeResult;

    if (loginResult.success) {
      try {
        scrapeResult = await this.fetchData();
      } catch (e) {
        scrapeResult = e instanceof _waiting.TimeoutError ? createTimeoutError(e.message) : createGenericError(e.message);
      }
    } else {
      scrapeResult = loginResult;
    }

    try {
      const success = scrapeResult && scrapeResult.success === true;
      await this.terminate(success);
    } catch (e) {
      scrapeResult = createGenericError(e.message);
    }

    this.emitProgress(ScaperProgressTypes.EndScraping);
    return scrapeResult;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/require-await


  async login(_credentials) {
    throw new Error(`login() is not created in ${this.options.companyId}`);
  } // eslint-disable-next-line  @typescript-eslint/require-await


  async fetchData() {
    throw new Error(`fetchData() is not created in ${this.options.companyId}`);
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/require-await


  async terminate(_success) {
    this.emitProgress(ScaperProgressTypes.Terminating);
  }

  emitProgress(type) {
    this.emit(SCRAPE_PROGRESS, {
      type
    });
  }

  emit(eventName, payload) {
    this.eventEmitter.emit(eventName, this.options.companyId, payload);
  }

  onProgress(func) {
    this.eventEmitter.on(SCRAPE_PROGRESS, func);
  }

}

exports.BaseScraper = BaseScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,