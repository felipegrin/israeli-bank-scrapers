"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

var _elementsInteractions = require("../helpers/elements-interactions");

var _navigation = require("../helpers/navigation");

var _fetch = require("../helpers/fetch");

var _transactions = require("../transactions");

var _baseScraper = require("./base-scraper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BASE_URL = 'https://start.telebank.co.il';
const DATE_FORMAT = 'YYYYMMDD';

function convertTransactions(txns, txnStatus) {
  if (!txns) {
    return [];
  }

  return txns.map(txn => {
    return {
      type: _transactions.TransactionTypes.Normal,
      identifier: txn.OperationNumber,
      date: (0, _moment.default)(txn.OperationDate, DATE_FORMAT).toISOString(),
      processedDate: (0, _moment.default)(txn.ValueDate, DATE_FORMAT).toISOString(),
      originalAmount: txn.OperationAmount,
      originalCurrency: 'ILS',
      chargedAmount: txn.OperationAmount,
      description: txn.OperationDescriptionToDisplay,
      status: txnStatus
    };
  });
}

async function fetchAccountData(page, options) {
  const apiSiteUrl = `${BASE_URL}/Titan/gatewayAPI`;
  const accountDataUrl = `${apiSiteUrl}/userAccountsData`;
  const accountInfo = await (0, _fetch.fetchGetWithinPage)(page, accountDataUrl);

  if (!accountInfo) {
    return {
      success: false,
      errorType: _baseScraper.ScraperErrorTypes.Generic,
      errorMessage: 'failed to get account data'
    };
  }

  const accountNumber = accountInfo.UserAccountsData.DefaultAccountNumber;
  const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
  const startDate = options.startDate || defaultStartMoment.toDate();

  const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));

  const startDateStr = startMoment.format(DATE_FORMAT);
  const txnsUrl = `${apiSiteUrl}/lastTransactions/${accountNumber}/Date?IsCategoryDescCode=True&IsTransactionDetails=True&IsEventNames=True&IsFutureTransactionFlag=True&FromDate=${startDateStr}`;
  const txnsResult = await (0, _fetch.fetchGetWithinPage)(page, txnsUrl);

  if (!txnsResult || txnsResult.Error || !txnsResult.CurrentAccountLastTransactions) {
    return {
      success: false,
      errorType: _baseScraper.ScraperErrorTypes.Generic,
      errorMessage: txnsResult && txnsResult.Error ? txnsResult.Error.MsgText : 'unknown error'
    };
  }

  const completedTxns = convertTransactions(txnsResult.CurrentAccountLastTransactions.OperationEntry, _transactions.TransactionStatuses.Completed);

  const rawFutureTxns = _lodash.default.get(txnsResult, 'CurrentAccountLastTransactions.FutureTransactionsBlock.FutureTransactionEntry');

  const pendingTxns = convertTransactions(rawFutureTxns, _transactions.TransactionStatuses.Pending);
  const accountData = {
    success: true,
    accounts: [{
      accountNumber,
      balance: txnsResult.CurrentAccountLastTransactions.CurrentAccountInfo.AccountBalance,
      txns: [...completedTxns, ...pendingTxns]
    }]
  };
  return accountData;
}

async function navigateOrErrorLabel(page) {
  try {
    await (0, _navigation.waitForNavigation)(page);
  } catch (e) {
    await (0, _elementsInteractions.waitUntilElementFound)(page, '#general-error', false, 100);
  }
}

function getPossibleLoginResults() {
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [`${BASE_URL}/apollo/retail/#/MY_ACCOUNT_HOMEPAGE`];
  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [`${BASE_URL}/apollo/core/templates/lobby/masterPage.html#/LOGIN_PAGE`];
  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = [`${BASE_URL}/apollo/core/templates/lobby/masterPage.html#/PWD_RENEW`];
  return urls;
}

function createLoginFields(credentials) {
  return [{
    selector: '#tzId',
    value: credentials.id
  }, {
    selector: '#tzPassword',
    value: credentials.password
  }, {
    selector: '#aidnum',
    value: credentials.num
  }];
}

class DiscountScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: `${BASE_URL}/login/#/LOGIN_PAGE`,
      checkReadiness: async () => (0, _elementsInteractions.waitUntilElementFound)(this.page, '#tzId'),
      fields: createLoginFields(credentials),
      submitButtonSelector: '.sendBtn',
      postAction: async () => navigateOrErrorLabel(this.page),
      possibleResults: getPossibleLoginResults()
    };
  }

  async fetchData() {
    return fetchAccountData(this.page, this.options);
  }

}

var _default = DiscountScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,