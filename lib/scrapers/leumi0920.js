"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

var _navigation = require("../helpers/navigation");

var _elementsInteractions = require("../helpers/elements-interactions");

var _constants = require("../constants");

var _transactions = require("../transactions");
const { setTimeout } = require("timers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BASE_URL = 'https://hb2.bankleumi.co.il';
const LOGIN_URL = 'https://www.leumi.co.il/';
const TRANSACTIONS_URL = `${BASE_URL}/eBanking/SO/SPA.aspx#/ts/CardsWorld`;
const FILTERED_TRANSACTIONS_URL = `${BASE_URL}/ChannelWCF/Broker.svc/ProcessRequest?moduleName=UC_MS_125_CreditCardsInfo`;
const DATE_FORMAT = 'DD.MM.YY';
const ACCOUNT_BLOCKED_MSG = 'המנוי חסום';
const INVALID_PASSWORD_MSG = 'אחד או יותר מפרטי ההזדהות שמסרת שגויים. ניתן לנסות שוב';

function getPossibleLoginResults() {
  const urls = {
    [_baseScraperWithBrowser.LoginResults.Success]: [/ebanking\/SO\/SPA.aspx/i],
    [_baseScraperWithBrowser.LoginResults.InvalidPassword]: [async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }

      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, '.errHeader', '', label => {
        var _ref;

        return (_ref = label[0]) === null || _ref === void 0 ? void 0 : _ref.innerText;
      });
      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(INVALID_PASSWORD_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.AccountBlocked]: [async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }

      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, '.errHeader', '', label => {
        var _ref2;

        return (_ref2 = label[0]) === null || _ref2 === void 0 ? void 0 : _ref2.innerText;
      });
      return errorMessage === null || errorMessage === void 0 ? void 0 : errorMessage.startsWith(ACCOUNT_BLOCKED_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.ChangePassword]: ['https://hb2.bankleumi.co.il/authenticate']
  };
  return urls;
}

function createLoginFields(credentials) {
  return [{
    selector: 'input[placeholder="שם משתמש"]',
    value: credentials.username
  }, {
    selector: 'input[placeholder="סיסמה"]',
    value: credentials.password
  }];
}

function extractTransactionsFromPage(transactions, status) {

  if (transactions === null || transactions.length === 0) {
    return [];
  }

  const result = transactions.map(rawTransaction => {
    const date = (0, _moment.default)(rawTransaction.DateDealUTC).format("YYYY-MM-DD");
    const Amount2 = Math.round(rawTransaction.NextPaymentAmountDouble * 100);
    const Amount3 = -Amount2;
    const newTransaction = {
      date,
      payee_name: rawTransaction.DebitCardFirmName || '',
      notes: rawTransaction.DealDescription || '',
      amount: Amount3
    };
    return newTransaction;
  });
  return result;
}

function hangProcess(timeout) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve();
    }, timeout);
  });
}

async function clickByXPath(page, xpath) {
  await page.waitForXPath(xpath, {
    timeout: 30000,
    visible: true
  });
  const elm = await page.$x(xpath);
  await elm[0].click();
}

function removeSpecialCharacters(str) {
  return str.replace(/[^0-9/-]/g, '');
}

async function fetchTransactionsForAccount(page, startDate, accountId) {
  // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.
  await hangProcess(4000);
  //Interacting(clicking) throuh the webpage to get the response
 const [targetElement1] = await page.$x("//article//span[contains(.,'0920')]");
 await targetElement1.click();
 await hangProcess(4000);
 const [targetElement2] = await page.$x("//article//span[contains(.,'3875')]");
 await targetElement2.click();
 await hangProcess(4000);
 const [targetElement3] = await page.$x("//article//span[contains(.,'0920')]");
 await targetElement3.click();
  //The Leumi website gets three responses by card. We are interested in the third one. That's why here we retrive the response three times.
  const finalResponse3 = await page.waitForResponse(response => {
    return response.url() === FILTERED_TRANSACTIONS_URL && response.request().method() === 'POST';
  });
  await finalResponse3;
  const finalResponse2 = await page.waitForResponse(response => {
    return response.url() === FILTERED_TRANSACTIONS_URL && response.request().method() === 'POST';
  });
  await finalResponse2;
  const finalResponse = await page.waitForResponse(response => {
    return response.url() === FILTERED_TRANSACTIONS_URL && response.request().method() === 'POST';
  });
  const responseJson = await finalResponse.json();
 // const accountNumber = accountId.replace('/', '_').replace(/[^\d-_]/g, '');
  const accountNumber = "leumi0920";
  const response = JSON.parse(responseJson.jsonResp);
  let completedTxns = [];
  let pendingTxns = [];
  let balance = 0;
  if(response.Activity != null && response.Activity.TabNisTransactionItems != null){
    const transactions = response.Activity.TabNisTransactionItems[0].NisTransactionItems;
    completedTxns = extractTransactionsFromPage(transactions, 'completed');
     balance = response.Activity.TabNisTransactionItems[0].TotalAmountDouble;
  } else {
    console.log("No Cleared Transactions");
  };
  if(response.Activity != null && response.Activity.RealTimeTransItems != null){
    //  const pendingTransactions = response.Activity.RealTimeTransItems;
    //  pendingTxns = extractTransactionsFromPage(pendingTransactions, 'pending');
    pendingTxns = [];
  } else {
    console.log("No Pending Transactions");
  };
  const txns = [...pendingTxns, ...completedTxns];
  return {
    accountNumber,
    balance,
    txns
  };
}

async function fetchTransactions(page, startDate) {
  const accounts = []; // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.

  await hangProcess(4000);
  const accountsIds = await page.evaluate(() => Array.from(document.querySelectorAll('app-masked-number-combo span.display-number-li'), e => e.textContent)); // due to a bug, the altered value might include undesired signs like & that should be removed

  if (!accountsIds.length) {
    throw new Error('Failed to extract or parse the account number');
  }

  for (const accountId of accountsIds) {
    if (accountsIds.length > 1) {
      // get list of accounts and check accountId
      await clickByXPath(page, '//*[contains(@class, "number") and contains(@class, "combo-inner")]');
      await clickByXPath(page, `//span[contains(text(), '${accountId}')]`);
    }

    accounts.push((await fetchTransactionsForAccount(page, startDate, removeSpecialCharacters(accountId))));
  }

  return accounts;
}

async function navigateToLogin(page) {
  const loginButtonSelector = '.enter-account a[originaltitle="כניסה לחשבונך"]';
  await (0, _elementsInteractions.waitUntilElementFound)(page, loginButtonSelector);
  await (0, _elementsInteractions.clickButton)(page, loginButtonSelector);
  await _navigation.waitForNavigation(page, { waitUntil: 'networkidle2' });
  await Promise.all([
    _elementsInteractions.waitUntilElementFound(page, 'input[placeholder="שם משתמש"]', true),
    _elementsInteractions.waitUntilElementFound(page, 'input[placeholder="סיסמה"]', true),
    _elementsInteractions.waitUntilElementFound(page, 'button[type="submit"]', true),
  ]);
}

async function waitForPostLogin(page) {
  try {
    await Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, 'a[title="דלג לחשבון"]', true, 30000), (0, _elementsInteractions.waitUntilElementFound)(page, 'div.leumi-container', true, 30000),   page.waitForXPath(`//div[contains(string(),"${INVALID_PASSWORD_MSG}")]`),
    _elementsInteractions.waitUntilElementFound(page, 'form[action="/changepassword"]', true, 60000)
  ]);
   } catch (e) {
    console.log("LOGIN STUCK! RELOADING...");
   }
}


class Leumi0920Scraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: createLoginFields(credentials),
      submitButtonSelector: "button[type='submit']",
      checkReadiness: async () => navigateToLogin(this.page, credentials),
      postAction: async () => waitForPostLogin(this.page),
      possibleResults: getPossibleLoginResults()
    };
  }

  async fetchData() {
    const minimumStartMoment = (0, _moment.default)().subtract(3, 'years').add(1, 'day');
    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();

    const startMoment = _moment.default.max(minimumStartMoment, (0, _moment.default)(startDate));

    await this.navigateTo(TRANSACTIONS_URL);
    const accounts = await fetchTransactions(this.page, startMoment);
    return {
      success: true,
      accounts
    };
  }

}

var _default = Leumi0920Scraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,