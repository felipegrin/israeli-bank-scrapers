"use strict";

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _moment = _interopRequireDefault(require("moment"));

var _constants = require("../constants");

var _elementsInteractions = require("../helpers/elements-interactions");

var _navigation = require("../helpers/navigation");

var _transactions = require("../transactions");

var _baseScraperWithBrowser = require("./base-scraper-with-browser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const LOGIN_URL = 'https://login.yahav.co.il/login/';
const BASE_URL = 'https://digital.yahav.co.il/BaNCSDigitalUI/app/index.html#/';
const INVALID_DETAILS_SELECTOR = '.ui-dialog-buttons';
const CHANGE_PASSWORD_OLD_PASS = 'input#ef_req_parameter_old_credential';
const BASE_WELCOME_URL = `${BASE_URL}main/home`;
const ACCOUNT_ID_SELECTOR = '.dropdown-dir .selected-item-top';
const ACCOUNT_DETAILS_SELECTOR = '.account-details';
const DATE_FORMAT = 'DD/MM/YYYY';
const USER_ELEM = '#username';
const PASSWD_ELEM = '#password';
const NATIONALID_ELEM = '#pinno';
const SUBMIT_LOGIN_SELECTOR = '.btn';

function getPossibleLoginResults(page) {
  // checkout file `base-scraper-with-browser.ts` for available result types
  const urls = {};
  urls[_baseScraperWithBrowser.LoginResults.Success] = [`${BASE_WELCOME_URL}`];
  urls[_baseScraperWithBrowser.LoginResults.InvalidPassword] = [async () => {
    return (0, _elementsInteractions.elementPresentOnPage)(page, `${INVALID_DETAILS_SELECTOR}`);
  }];
  urls[_baseScraperWithBrowser.LoginResults.ChangePassword] = [async () => {
    return (0, _elementsInteractions.elementPresentOnPage)(page, `${CHANGE_PASSWORD_OLD_PASS}`);
  }];
  return urls;
}

async function getAccountID(page) {
  const selectedSnifAccount = await page.$eval(`${ACCOUNT_ID_SELECTOR}`, option => {
    return option.innerText;
  });
  return selectedSnifAccount;
}

function getAmountData(amountStr) {
  const amountStrCopy = amountStr.replace(',', '');
  return parseFloat(amountStrCopy);
}

function getTxnAmount(txn) {
  const credit = getAmountData(txn.credit);
  const debit = getAmountData(txn.debit);
  return (Number.isNaN(credit) ? 0 : credit) - (Number.isNaN(debit) ? 0 : debit);
}

function convertTransactions(txns) {
  return txns.map(txn => {
    const convertedDate = (0, _moment.default)(txn.date, DATE_FORMAT).toISOString();
    const convertedAmount = getTxnAmount(txn);
    return {
      type: _transactions.TransactionTypes.Normal,
      identifier: txn.reference ? parseInt(txn.reference, 10) : undefined,
      date: convertedDate,
      processedDate: convertedDate,
      originalAmount: convertedAmount,
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: convertedAmount,
      status: txn.status,
      description: txn.description,
      memo: txn.memo
    };
  });
}

function handleTransactionRow(txns, txnRow) {
  const div = txnRow.innerDivs; // Remove anything except digits.

  const regex = /\D+/gm;
  const tx = {
    date: div[1],
    reference: div[2].replace(regex, ''),
    memo: '',
    description: div[3],
    debit: div[4],
    credit: div[5],
    status: _transactions.TransactionStatuses.Completed
  };
  txns.push(tx);
}

async function getAccountTransactions(page) {
  // Wait for transactions.
  await (0, _elementsInteractions.waitUntilElementFound)(page, '.under-line-txn-table-header', true);
  const txns = [];
  const transactionsDivs = await (0, _elementsInteractions.pageEvalAll)(page, '.list-item-holder .entire-content-ctr', [], divs => {
    return divs.map(div => ({
      id: div.getAttribute('id') || '',
      innerDivs: Array.from(div.getElementsByTagName('div')).map(div => div.innerText)
    }));
  });

  for (const txnRow of transactionsDivs) {
    handleTransactionRow(txns, txnRow);
  }

  return convertTransactions(txns);
} // Manipulate the calendar drop down to choose the txs start date.


async function searchByDates(page, startDate) {
  // Get the day number from startDate. 1-31 (usually 1)
  const startDateDay = startDate.format('D');
  const startDateMonth = startDate.format('M');
  const startDateYear = startDate.format('Y'); // Open the calendar date picker

  const dateFromPick = 'div.date-options-cell:nth-child(7) > date-picker:nth-child(1) > div:nth-child(1) > span:nth-child(2)';
  await (0, _elementsInteractions.waitUntilElementFound)(page, dateFromPick, true);
  await (0, _elementsInteractions.clickButton)(page, dateFromPick); // Wait until first day appear.

  await (0, _elementsInteractions.waitUntilElementFound)(page, '.pmu-days > div:nth-child(1)', true); // Open Months options.

  const monthFromPick = '.pmu-month';
  await (0, _elementsInteractions.waitUntilElementFound)(page, monthFromPick, true);
  await (0, _elementsInteractions.clickButton)(page, monthFromPick);
  await (0, _elementsInteractions.waitUntilElementFound)(page, '.pmu-months > div:nth-child(1)', true); // Open Year options.
  // Use same selector... Yahav knows why...

  await (0, _elementsInteractions.waitUntilElementFound)(page, monthFromPick, true);
  await (0, _elementsInteractions.clickButton)(page, monthFromPick);
  await (0, _elementsInteractions.waitUntilElementFound)(page, '.pmu-years > div:nth-child(1)', true); // Select year from a 12 year grid.

  for (let i = 1; i < 13; i += 1) {
    const selector = `.pmu-years > div:nth-child(${i})`;
    const year = await page.$eval(selector, y => {
      return y.innerText;
    });

    if (startDateYear === year) {
      await (0, _elementsInteractions.clickButton)(page, selector);
      break;
    }
  } // Select Month.


  await (0, _elementsInteractions.waitUntilElementFound)(page, '.pmu-months > div:nth-child(1)', true); // The first element (1) is January.

  const monthSelector = `.pmu-months > div:nth-child(${startDateMonth})`;
  await (0, _elementsInteractions.clickButton)(page, monthSelector); // Select Day.
  // The calendar grid shows 7 days and 6 weeks = 42 days.
  // In theory, the first day of the month will be in the first row.
  // Let's check everything just in case...

  for (let i = 1; i < 42; i += 1) {
    const selector = `.pmu-days > div:nth-child(${i})`;
    const day = await page.$eval(selector, d => {
      return d.innerText;
    });

    if (startDateDay === day) {
      await (0, _elementsInteractions.clickButton)(page, selector);
      break;
    }
  }
}

async function fetchAccountData(page, startDate, accountID) {
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
  await searchByDates(page, startDate);
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
  const txns = await getAccountTransactions(page);
  return {
    accountNumber: accountID,
    txns
  };
}

async function fetchAccounts(page, startDate) {
  const accounts = []; // TODO: get more accounts. Not sure is supported.

  const accountID = await getAccountID(page);
  const accountData = await fetchAccountData(page, startDate, accountID);
  accounts.push(accountData);
  return accounts;
}

async function waitReadinessForAll(page) {
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${USER_ELEM}`, true);
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${PASSWD_ELEM}`, true);
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${NATIONALID_ELEM}`, true);
  await (0, _elementsInteractions.waitUntilElementFound)(page, `${SUBMIT_LOGIN_SELECTOR}`, true);
}

async function redirectOrDialog(page) {
  // Click on bank messages if any.
  await (0, _navigation.waitForNavigation)(page);
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
  const hasMessage = await (0, _elementsInteractions.elementPresentOnPage)(page, '.messaging-links-container');

  if (hasMessage) {
    await (0, _elementsInteractions.clickButton)(page, '.link-1');
  }

  const promise1 = page.waitForSelector(ACCOUNT_DETAILS_SELECTOR, {
    timeout: 30000
  });
  const promise2 = page.waitForSelector(CHANGE_PASSWORD_OLD_PASS, {
    timeout: 30000
  });
  const promises = [promise1, promise2];
  await Promise.race(promises);
  await (0, _elementsInteractions.waitUntilElementDisappear)(page, '.loading-bar-spinner');
}

class YahavScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: `${LOGIN_URL}`,
      fields: [{
        selector: `${USER_ELEM}`,
        value: credentials.username
      }, {
        selector: `${PASSWD_ELEM}`,
        value: credentials.password
      }, {
        selector: `${NATIONALID_ELEM}`,
        value: credentials.nationalID
      }],
      submitButtonSelector: `${SUBMIT_LOGIN_SELECTOR}`,
      checkReadiness: async () => waitReadinessForAll(this.page),
      postAction: async () => redirectOrDialog(this.page),
      possibleResults: getPossibleLoginResults(this.page)
    };
  }

  async fetchData() {
    // Goto statements page
    await (0, _elementsInteractions.waitUntilElementFound)(this.page, ACCOUNT_DETAILS_SELECTOR, true);
    await (0, _elementsInteractions.clickButton)(this.page, ACCOUNT_DETAILS_SELECTOR);
    await (0, _elementsInteractions.waitUntilElementFound)(this.page, '.statement-options .selected-item-top', true);
    const defaultStartMoment = (0, _moment.default)().subtract(3, 'months').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();

    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));

    const accounts = await fetchAccounts(this.page, startMoment);
    return {
      success: true,
      accounts
    };
  }

}

var _default = YahavScraper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,